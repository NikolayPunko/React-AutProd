import React, {useEffect, useRef, useState} from 'react';
import "@fortawesome/fontawesome-free/css/all.min.css";
import "./../reportsConstruct/ReportEditor.css";

import * as XLSX from "xlsx";
import html2canvas from "html2canvas";
import html2pdf from "html2pdf.js";
import jsPDF from "jspdf";
import grapesjs from "grapesjs";

import grapesjspresetwebpage from 'grapesjs-preset-webpage/dist/index.js';
// import grapesjstable from 'grapesjs-table/src/blocks.js';

import ru from 'grapesjs/locale/ru';

import htmlToPdfmake from "html-to-pdfmake"; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º html-to-pdfmake

import pdfMake from "pdfmake/build/pdfmake";
import pdfFonts from "pdfmake/build/vfs_fonts"; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —à—Ä–∏—Ñ—Ç—ã –¥–ª—è pdfmake

// –î–æ–±–∞–≤–ª—è–µ–º —à—Ä–∏—Ñ—Ç Roboto –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é —Ñ–∞–π–ª–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É pdfmake
// pdfMake.vfs = pdfFonts.pdfMake.vfs;

const ReportEditor = () => {
    const [zoom, setZoom] = useState(100);
    const [editorView, setEditorView] = useState(null);

    const editorRef = useRef(null);

    const [pages, setPages] = useState([{id: 1, content: "", styles: ""}]);
    const [currentPage, setCurrentPage] = useState(1); // –ê–∫—Ç–∏–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞


    pdfMake.addVirtualFileSystem(pdfFonts);


    useEffect(() => {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è GrapesJS
        const editor = grapesjs.init({
            container: editorRef.current,
            telemetry: false,
            fromElement: true,
            height: "1200px",
            width: 'auto',
            default_locale: 'ru',
            i18n: {
                locale: 'ru', // default locale
                detectLocale: true, // by default, the editor will detect the language
                localeFallback: 'ru', // default fallback
                messages: {ru},
            },
            dragMode: 'absolute',
            storageManager: false, // –û—Ç–∫–ª—é—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
            // panels: { defaults: [] }, // –£–±–∏—Ä–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–∞–Ω–µ–ª–∏npm
            plugins: [grapesjspresetwebpage],
            canvas: {
                styles: [`
          body {
            overflow: hidden; /* üî• –ó–∞–ø—Ä–µ—â–∞–µ–º –≤—ã—Ö–æ–¥ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã */
          }
          .gjs-cv-canvas {
            width: 210mm;  /* üî• –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é —à–∏—Ä–∏–Ω—É (A4) */
            height: 297mm; /* üî• –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤—ã—Å–æ—Ç—É */
            margin: auto;
            position: relative;
            overflow: hidden; /* üî• –ó–∞–ø—Ä–µ—â–∞–µ–º –≤—ã–ª–µ—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã */
          }
          
        `]
            },


            // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
            deviceManager: {
                devices: [], // –ü–æ–ª–Ω–æ—Å—Ç—å—é —É–±–∏—Ä–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
            }, // styleManager: {
            //     sectors: [
            //         // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç–∏–ª–µ–π
            //     ]
            // }


        });


        setTimeout(() => {

            const canvasElement = editor.Canvas.getElement()

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –∫–∞–Ω–≤–∞—Å–∞ (—Ñ–æ—Ä–º–∞—Ç A4)
            canvasElement.style.width = '794px';
            canvasElement.style.height = '1123px';
            canvasElement.style.margin = '0';
            // canvasElement.style.padding = '20px';
            canvasElement.style.marginLeft = '15%';
            canvasElement.style.marginTop = '20px';
            canvasElement.style.backgroundColor = '#949494';
            canvasElement.style.border = '5px';
            canvasElement.style.overflow = 'hidden';


            editor.Canvas.getBody().style.width = '794px';
            editor.Canvas.getBody().style.height = '1123px';
            editor.Canvas.getBody().style.margin = '0';
            editor.Canvas.getBody().style.backgroundColor = '#9a9a9a';
            // editor.Canvas.getBody().style.padding = '20px';
            editor.Canvas.getBody().style.backgroundColor = '#ffffff';
            editor.Canvas.getBody().style.overflow = 'hidden';
            editor.Canvas.getBody().style.position = 'relative';


        }, 200);

        editor.setComponents(pages[0].content);

        editor.setStyle({
            'background-color': '#bf13d9', // –¶–≤–µ—Ç —Ñ–æ–Ω–∞
        });

        editor.setComponents(`<span style="text-align:center; padding: 10px; width:300px; left: 60px;
              position: absolute; top:60px; font-size: larger;font-weight: 700;">–ù–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞...</span>`);


        // console.log(editor.Panels.getPanels())


        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
        editor.Panels.addButton('options', [
            {
                id: 'zoom-',
                className: 'fa fa-magnifying-glass-minus',
                command: () => changeZoom(-10),
                attributes: {title: '–£–º–µ–Ω—å—à–∏—Ç—å –º–∞—à—Ç–∞–±'},
            }, {
                id: 'zoom+',
                className: 'fa fa-magnifying-glass-plus',
                command: () => changeZoom(10),
                attributes: {title: '–£–≤–µ–ª–∏—á–∏—Ç—å –º–∞—à—Ç–∞–±'},
            },
            // {
            //     id: 'export-excel',
            //     className: 'fa fa-file-excel',
            //     command: () => exportExcel(editor),
            //     attributes: {title: '–≠–∫—Å–ø–æ—Ä—Ç Exel'},
            // }, {
            //     id: 'export-html',
            //     className: 'fa fa-code',
            //     command: () => exportHtml(editor),
            //     attributes: {title: '–≠–∫—Å–ø–æ—Ä—Ç HTML'},
            // }, {
            //     id: 'export-pdf',
            //     className: 'fa fa-file-pdf',
            //     command: () => exportPDF(editor),
            //     attributes: {title: '–≠–∫—Å–ø–æ—Ä—Ç PDF'},
            // },
            //
            //     {
            //         id: 'export-json',
            //         className: 'fa fa-file-export',
            //         command: () => exportToJSON(editor),
            //         attributes: {title: '–≠–∫—Å–ø–æ—Ä—Ç JSON'},
            //     }, {
            //         id: 'import-json',
            //         className: 'fa fa-upload',
            //         command: () => handleImportJSON(editor),
            //         attributes: {title: '–ò–º–ø–æ—Ä—Ç JSON'},
            //     }, {
            //         id: 'print',
            //         className: 'fa fa-print',
            //         command: () => handlePrintReport(editor),
            //         attributes: {title: '–ü–µ—á–∞—Ç—å'},
            //     },

        ]);

        addDeviceManager(editor);

        addBlocks(editor);

        editor.DataSources.add({
            id: 'my_data_source_id', records: [{id: 'id1', name: 'value1'}, {id: 'id2', name: 'value2'}]
        });


        const restrictDragToCanvas = (component) => {
            const el = component.view?.el;
            if (!el) return;

            const canvas = editor.Canvas.getBody();
            const canvasWidth = canvas.offsetWidth;
            const canvasHeight = canvas.offsetHeight;

            const style = window.getComputedStyle(el);
            let newLeft = parseInt(style.left, 10) || 0;
            let newTop = parseInt(style.top, 10) || 0;


            const elementWidth = el.offsetWidth;
            const elementHeight = el.offsetHeight;


            if (newLeft < 0) newLeft = 0;
            if (newTop < 0) newTop = 0;
            if (newLeft + elementWidth > canvasWidth) newLeft = canvasWidth - elementWidth;
            if (newTop + elementHeight > canvasHeight) newTop = canvasHeight - elementHeight;

            component.addStyle({left: `${newLeft}px`, top: `${newTop}px`});
        };

        editor.on("component:drag:end", (event => {
            restrictDragToCanvas(event.target);
        }));


        setEditorView(editor);


        document.querySelector('.gjs-pn-devices-c').querySelector('.gjs-pn-buttons').innerHTML = "" // —É–¥–∞–ª—è–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π div —Å –¥–µ–≤–∞–π—Å–∞–º–∏


        editor.Panels.addButton('devices-c', [// {
            //     id: 'prevPage',
            //     className: 'fa-solid fa-angle-left',
            //     command: () => switchPage(1),
            //     attributes: {title: '–ü—Ä–µ–¥. —Å—Ç—Ä–∞–Ω–∏—Ü–∞'},
            // },
            // {
            //     id: 'currentPage',
            //     className: 'custom-page-display',
            //     attributes: {
            //         title: '–¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞',
            //     },
            //     label: `${currentPage} / ${pages.length}`
            // },
            // {
            //     id: 'nextPage',
            //     className: 'fa-solid fa-angle-right',
            //     command: () => switchPage(2),
            //     attributes: {title: '–°–ª–µ–¥. —Å—Ç—Ä–∞–Ω–∏—Ü–∞'},
            // },
            //     {
            //     id: 'export-excel',
            //     className: 'fa fa-file-excel',
            //     command: () => exportExcel(editor),
            //     attributes: {title: '–≠–∫—Å–ø–æ—Ä—Ç Exel'},
            // }, {
            //     id: 'export-html',
            //     className: 'fa fa-code',
            //     command: () => exportHtml(editor),
            //     attributes: {title: '–≠–∫—Å–ø–æ—Ä—Ç HTML'},
            // }, {
            //     id: 'export-pdf',
            //     className: 'fa fa-file-pdf',
            //     command: () => exportPDF(editor),
            //     attributes: {title: '–≠–∫—Å–ø–æ—Ä—Ç PDF'},
            // },
            //
            //     {
            //         id: 'export-json',
            //         className: 'fa fa-file-export',
            //         command: () => exportToJSON(editor),
            //         attributes: {title: '–≠–∫—Å–ø–æ—Ä—Ç JSON'},
            //     }, {
            //         id: 'import-json',
            //         className: 'fa fa-upload',
            //         command: () => handleImportJSON(editor),
            //         attributes: {title: '–ò–º–ø–æ—Ä—Ç JSON'},
            //     }, {
            //         id: 'print',
            //         className: 'fa fa-print',
            //         command: () => handlePrintReport(editor),
            //         attributes: {title: '–ü–µ—á–∞—Ç—å'},
            //     },
        ])



        // editorRef.current = editor;
        setEditorView(editor);

        // editor.on("components:update", () => {
        //     console.log("style:update");
        //     saveCurrentPage(editor);
        // });

        // editor.on("component:add", (model) => console.log("–î–æ–±–∞–≤–ª–µ–Ω –∫–æ–º–ø–æ–Ω–µ–Ω—Ç:", model));
        // editor.on("component:remove", (model) => console.log("–£–¥–∞–ª–µ–Ω –∫–æ–º–ø–æ–Ω–µ–Ω—Ç:", model));
        // editor.on("component:drag:end", (model) => console.log("–ö–æ–º–ø–æ–Ω–µ–Ω—Ç –ø–µ—Ä–µ–º–µ—â–µ–Ω:", model));
        // editor.on("components:update", () => console.log("–ò–∑–º–µ–Ω–µ–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤!"));
        // editor.on("component:change:content", (model) => console.log("–ò–∑–º–µ–Ω–µ–Ω —Ç–µ–∫—Å—Ç:", model));
        // editor.on("style:update", (model) => console.log("–û–±–Ω–æ–≤–ª–µ–Ω—ã —Å—Ç–∏–ª–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞:", model));
        editor.on("change", (model) => console.log("–û–±–Ω–æ–≤–ª–µ–Ω—ã –∞—Ç—Ä–∏–±—É—Ç—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞:", model));
        // editor.on("component:selected", (model) => console.log("–í—ã–±—Ä–∞–Ω –∫–æ–º–ø–æ–Ω–µ–Ω—Ç:", model));
    }, []);

    useEffect(() => {
        if (editorView) {
            const panel = editorView.Panels.getButton('devices-c', 'currentPage');
            if (panel) {
                panel.set('label', `${currentPage} / ${pages.length}`);
            }
        }
    }, [pages, currentPage]);

    useEffect(() => {
        console.log("useEffect editor")
    }, [editorView])

    const switchPage = (id) => {
        const editor = editorView
        // if (!editor) {
        //     return;
        // }
        saveCurrentPage(editor); // –°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É

        setTimeout(() => {

            console.log(pages)

            const page = pages.find((p) => p.id === id);
            if (page) {
                editor.setComponents(page.content);
                editor.setStyle(page.styles);
                setCurrentPage(id);
            }
        }, 100); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
    };

    const saveCurrentPage = async (editor) => {
        if (!editor) {
            return;
        }
        console.log("saveCurrentPage")
        const html = editor.getHtml();
        const css = editor.getCss();

        return new Promise((resolve) => {
            setPages((prevPages) => {
                const updatedPages = prevPages.map((page) => page.id === currentPage ? {
                    ...page,
                    content: html,
                    styles: css
                } : page);
                resolve(updatedPages);  // –ü–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤—ã–∑—ã–≤–∞–µ–º resolve
                return updatedPages;
            });
        });
    };


    const addPage = () => {
        const editor = editorView
        saveCurrentPage(editor);

        setTimeout(() => {
            const newPage = {
                id: pages.length + 1, content: "", styles: "",
            };

            setPages((prevPages) => [...prevPages, newPage]);
            setCurrentPage(newPage.id);

            if (editor) {
                editor.setComponents("");
                editor.setStyle("");
            }
        }, 100);
    };

    const removePage = () => {
        setPages((prevPages) => {
            if (prevPages.length > 1) {
                // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –º–∞—Å—Å–∏–≤–∞ —Å—Ç—Ä–∞–Ω–∏—Ü –∏ —É–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é
                const updatedPages = [...prevPages];
                updatedPages.pop();  // –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–∞–Ω–∏—Ü—É

                if (currentPage === prevPages.length) {
                    switchPage(updatedPages.length);
                }
                return updatedPages;
            }

            return prevPages;
        });

    };


    const exportJSON = async () => {
        try {
            // const updatedPages = await saveCurrentPage();
            const json = JSON.stringify(pages, null, 2);
            const blob = new Blob([json], {type: "application/json"});
            const link = document.createElement("a");
            link.href = URL.createObjectURL(blob);
            link.download = "report.json";
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏ —ç–∫—Å–ø–æ—Ä—Ç–µ:", error);
        }
    };


    const importJSON = () => {

        const fileInput = document.createElement("input");
        fileInput.type = "file";
        fileInput.accept = ".json";
        fileInput.style.display = "none";

        fileInput.addEventListener("change", (event) => {


            const file = event.target.files[0];
            if (!file) return;

            const reader = new FileReader();
            setPages([{id: 1, content: "", styles: ""}])
            try {
                reader.onload = (e) => {
                    const importedPages = JSON.parse(e.target.result);
                    setPages(importedPages);
                    setCurrentPage(importedPages[0]?.id || 1);

                    editorView.setComponents(importedPages[0].content);
                    editorView.setStyle(importedPages[0].styles);

                };
            } catch (error) {
                alert("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ JSON");
            }

            reader.readAsText(file);
        });

        document.body.appendChild(fileInput);
        fileInput.click();
        document.body.removeChild(fileInput);


    };


    const updateCanvasZoom = (newZoom) => {
        if (!editorView) return;
        const frame = editorView.Canvas.getElement();
        if (frame) {
            const scaleValue = newZoom / 100; // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã –≤ scale
            frame.style.transform = `scale(${scaleValue})`;
            frame.style.transformOrigin = "0 0"; // –§–∏–∫—Å–∏—Ä—É–µ–º —Ç–æ—á–∫—É –Ω–∞—á–∞–ª–∞
        }
    };

    const changeZoom = (value) => {
        setZoom((prevZoom) => {
            const newZoom = Math.min(Math.max(prevZoom + value, 50), 100);
            return newZoom;
        });
    };


    useEffect(() => {
        if (editorView) updateCanvasZoom(zoom);
    }, [zoom]);


    // –§—É–Ω–∫—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ HTML
    const exportHtml = (editor) => {
        // –ü–æ–ª—É—á–∞–µ–º HTML –∫–æ–Ω—Ç–µ–Ω—Ç
        const htmlContent = editor.getHtml();

        // –ü–æ–ª—É—á–∞–µ–º CSS, –≤–∫–ª—é—á–∞—è –∫–ª–∞—Å—Å—ã
        const cssContent = editor.getCss();

        // –°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π HTML —Å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–º–∏ —Å—Ç–∏–ª—è–º–∏
        const finalHtml = `
      <html>
        <head>
          <style>
            ${cssContent} <!-- –í—Å—Ç–∞–≤–ª—è–µ–º –≤—Å–µ —Å—Ç–∏–ª–∏ -->
          </style>
        </head>
        <body>
          ${htmlContent} <!-- –í—Å—Ç–∞–≤–ª—è–µ–º HTML –∫–æ–Ω—Ç–µ–Ω—Ç -->
        </body>
      </html>
    `;

        // –°–æ–∑–¥–∞–µ–º Blob –∏ —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        const blob = new Blob([finalHtml], {type: "text/html"});
        const link = document.createElement("a");
        link.href = URL.createObjectURL(blob);
        link.download = "exported_with_css.html"; // –ò–º—è —Ñ–∞–π–ª–∞
        link.click();
    };

    // –§—É–Ω–∫—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ PDF
    const exportPDF = async (editor) => {

        const htmlContent = editor.getHtml(); // –ü–æ–ª—É—á–∞–µ–º HTML
        const cssContent = editor.getCss(); // –ü–æ–ª—É—á–∞–µ–º CSS

        // üî• –°–æ–∑–¥–∞–µ–º —Å–∫—Ä—ã—Ç—ã–π iframe –¥–ª—è "—É–∫—Ä–∞–¥–µ–Ω–Ω–æ–≥–æ" –æ–∫–Ω–∞ –ø–µ—á–∞—Ç–∏
        const printFrame = document.createElement("iframe");
        printFrame.style.position = "absolute";
        printFrame.style.width = "0px";
        printFrame.style.height = "0px";
        printFrame.style.border = "none";

        document.body.appendChild(printFrame);

        const printDocument = printFrame.contentDocument || printFrame.contentWindow.document;
        printDocument.open();
        printDocument.write(`
      <html>
        <head>
          <title>–ü–µ—á–∞—Ç—å</title>
          <style>
            * { margin: 0; padding: 0; box-sizing: border-box; }

            @page { size: A4; margin: 0; }
            body { width: 210mm; height: 297mm; margin: 0 auto; overflow: hidden; }

            ${cssContent}
          </style>
        </head>
        <body>${htmlContent}</body>
      </html>
    `);
        printDocument.close();


        // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–µ—Ä–µ–¥ –ø–µ—á–∞—Ç—å—é
        setTimeout(() => {
            printFrame.contentWindow.focus();
            printFrame.contentWindow.print(); // –û—Ç–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ –ø–µ—á–∞—Ç–∏
            document.body.removeChild(printFrame); // –£–¥–∞–ª—è–µ–º iframe –ø–æ—Å–ª–µ –ø–µ—á–∞—Ç–∏
        }, 1000);
    };

    // –§—É–Ω–∫—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ Excel
    const exportExcel = (editor) => {
        const htmlContent = editor.getHtml(); // –ü–æ–ª—É—á–∞–µ–º HTML –∫–æ–Ω—Ç–µ–Ω—Ç –∏–∑ GrapesJS

        // –°–æ–∑–¥–∞–µ–º —Ä–∞–±–æ—á—É—é –∫–Ω–∏–≥—É
        const wb = XLSX.utils.book_new();
        const ws = XLSX.utils.aoa_to_sheet([[htmlContent]]); // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º HTML –≤ —Ä–∞–±–æ—á–∏–π –ª–∏—Å—Ç
        XLSX.utils.book_append_sheet(wb, ws, "Sheet1");

        // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤ Excel
        XLSX.writeFile(wb, "report.xlsx");
    };

    const exportToJSON = (editor) => {
        const data = editor.getProjectData(); // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
        const jsonStr = JSON.stringify(data, null, 2);
        const blob = new Blob([jsonStr], {type: "application/json"});
        const link = document.createElement("a");
        link.href = URL.createObjectURL(blob);
        link.download = "report.json";
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    };

    const handleImportJSON = (editor) => {
        const fileInput = document.createElement("input");
        fileInput.type = "file";
        fileInput.accept = ".json";
        fileInput.style.display = "none";

        fileInput.addEventListener("change", (event) => {
            const file = event.target.files[0];
            if (!file) return;

            const reader = new FileReader();
            reader.onload = (e) => {
                try {
                    const jsonData = JSON.parse(e.target.result);
                    editor.loadData(jsonData); // –ó–∞–≥—Ä—É–∂–∞–µ–º JSON –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä
                } catch (error) {
                    alert("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ JSON");
                }
            };
            reader.readAsText(file);
        });

        document.body.appendChild(fileInput);
        fileInput.click();
        document.body.removeChild(fileInput);
    };

    const handlePrintReport = (editor) => {

        const htmlContent = editor.getHtml(); // –ü–æ–ª—É—á–∞–µ–º HTML
        const cssContent = editor.getCss(); // –ü–æ–ª—É—á–∞–µ–º CSS

        // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π iframe
        const printWindow = window.open("", "_blank");
        if (!printWindow) return;

        // –ó–∞–ø–æ–ª–Ω—è–µ–º iframe –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
        printWindow.document.write(`
     <html>
        <head>
          <title>–ü–µ—á–∞—Ç—å</title>
          <style>
            * { margin: 0; padding: 0; box-sizing: border-box; }

            @page { size: A4; margin: 0; }
            body { width: 210mm; height: 297mm; margin: 0 auto; overflow: hidden; }

            ${cssContent}
          </style>
        </head>
        <body>${htmlContent}</body>
      </html>
    `);

        // –ñ–¥—ë–º —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∏ –≤—ã–∑—ã–≤–∞–µ–º –ø–µ—á–∞—Ç—å
        printWindow.document.close();
        printWindow.focus();
        setTimeout(() => {
            printWindow.print();
            printWindow.close();
        }, 500);
    };

    const printAllPages = () => {
        console.log(pages[0].content)
        // saveCurrentPage();


        let combinedHTML = "";
        let combinedCSS = "";

        for (let i = 0; i < pages.length; i++) {
            combinedHTML += `
      
         <div class="print-page">
            ${pages[i].content}
         </div>
         `;
            combinedCSS += " " + pages[i].styles;
        }

        const printWindow = window.open("", "_blank");
        printWindow.document.write(`
   
     <html>
        <head>
          <title>–ü–µ—á–∞—Ç—å</title>
          <style>
            ${combinedCSS}

            @media print {
            body {
              margin: 0;
              padding: 0;
              display: flex;
              flex-direction: column;
              align-items: center;
            }
            .print-page {
              width: 100%;
              max-width: 100%;
              height: 100vh;
              min-height: 100vh;
              box-sizing: border-box;
              display: flex;
              flex-direction: column;
              justify-content: flex-start;
              align-items: flex-start;
              padding: 20px;
              margin: 0 auto;
              position: relative;
              overflow: hidden;
              page-break-after: always; /* –°—Ç–∞–±–∏–ª—å–Ω–æ–µ —Ä–∞–∑–±–∏–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü */
              break-after: page;
            }
            .print-page:last-child {
              page-break-after: auto; /* –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–π –ø—É—Å—Ç–æ–π –ª–∏—Å—Ç –≤ –∫–æ–Ω—Ü–µ */
            }
          }
            @page { size: A4; margin: 0; }
            body { width: 210mm; height: 297mm; margin: 0 auto; overflow: hidden; }

            
          </style>
        </head>
        <body>${combinedHTML}
      </html>
      
  `);
        printWindow.document.close();
        setTimeout(() => printWindow.print(), 500); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
    };


    function addDeviceManager(editor) {
        // const deviceManager = editor.Devices;
        // const device1 = deviceManager.add({
        //     // Without an explicit ID, the `name` will be taken. In case of missing `name`, a random ID will be created.
        //     id: 'A4',
        //     name: 'A4',
        //     width: '110mm', // This width will be applied on the canvas frame and for the CSS media
        //     // width: '210px',
        //     // height: '297px'
        // });
        // // deviceManager.select(device1);
    }

    function addBlocks(editor) {
        editor.BlockManager.add("my-block", {
            label: "–ú–æ–π –±–ª–æ–∫", content: "<div style='padding:10px; background:#f3f3f3;'>Hello!</div>",
        });
        editor.BlockManager.add("h1", {
            label: "–ó–∞–≥–æ–ª–æ–≤–æ–∫ h1", // content: "<h1 style='padding:30px; '>–ó–∞–≥–æ–ª–æ–≤–æ–∫ h1</h1>",
            content: "<div style='padding:10px; font-size:32px; font-weight:bold '>–ó–∞–≥–æ–ª–æ–≤–æ–∫ h1</div>",
        });
        editor.BlockManager.add("h2", {
            label: "–ó–∞–≥–æ–ª–æ–≤–æ–∫ h2", // content: "<h1 style='padding:30px; '>–ó–∞–≥–æ–ª–æ–≤–æ–∫ h1</h1>",
            content: "<div style='padding:10px; font-size:24px; font-weight:bold '>–ó–∞–≥–æ–ª–æ–≤–æ–∫ h2</div>",
        });
        editor.BlockManager.add("h3", {
            label: "–ó–∞–≥–æ–ª–æ–≤–æ–∫ h3", // content: "<h1 style='padding:30px; '>–ó–∞–≥–æ–ª–æ–≤–æ–∫ h1</h1>",
            content: "<div style='padding:10px; font-size:19px; font-weight:bold '>–ó–∞–≥–æ–ª–æ–≤–æ–∫ h3</div>",
        });
        editor.BlockManager.add("paragraph", {
            label: "–ê–±–∑–∞—Ü", content: "<p style=\"font-size: 14px;\">–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞...</p>",
        });
        editor.BlockManager.add("table", {
            label: "–¢–∞–±–ª–∏—Ü–∞", content: `
                <table class="table table-bordered">
                  <thead>
                    <tr><th>–ó–∞–≥–æ–ª–æ–≤–æ–∫ 1</th><th>–ó–∞–≥–æ–ª–æ–≤–æ–∫ 2</th></tr>
                  </thead>
                  <tbody>
                    <tr><td>–î–∞–Ω–Ω—ã–µ 1</td><td>–î–∞–Ω–Ω—ã–µ 2</td></tr>
                  </tbody>
                </table>
              `,
        });
        editor.BlockManager.add("my-block", {
            label: "–ú–æ–π –±–ª–æ–∫", content: "<div style='padding:10px; background:#f3f3f3;'>Hello!</div>",
        });
    }

    return (
        <div>

            <div className=" gjs-two-color gjs-one-bg flex flex-row justify-between py-1 gjs-pn-commands">
                <div className="flex justify-start text-center ml-2 w-1/3">
                    <span className="gjs-pn-btn font-medium">–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –æ—Ç—á–µ—Ç–æ–≤</span>
                    <span className="gjs-pn-btn">
                        <i className="fa-solid fa-pencil"></i>
                    </span>

                </div>
                <div className="flex justify-start text-center w-1/3">
                    <span className="gjs-pn-btn" onClick={() => switchPage(currentPage - 1)}
                          title="–ü—Ä–µ–¥. —Å—Ç—Ä–∞–Ω–∏—Ü–∞">
                        <i className="fa-solid fa-angle-left"></i>
                    </span>
                    <span className="gjs-pn-btn">
                       {currentPage} / {pages.length}
                    </span>
                    <span className="gjs-pn-btn" onClick={() => switchPage(currentPage + 1)}
                          title="–°–ª–µ–¥. —Å—Ç—Ä–∞–Ω–∏—Ü–∞">
                        <i className="fa-solid fa-angle-right"></i>
                    </span>
                    <span className="gjs-pn-btn" onClick={addPage} title="–î–æ–±–∞–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É">
                        <i className="fa-solid fa-file-circle-plus"></i>
                    </span>
                    <span className="gjs-pn-btn" onClick={removePage} title="–£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–∞–Ω–∏—Ü—É">
                        <i className="fa-solid fa-trash"></i>
                    </span>
                </div>

                <div className="flex justify-end text-center mr-2 w-1/3">
                    <span className="gjs-pn-btn" onClick={() => exportExcel(editorView)} title="–≠–∫—Å–ø–æ—Ä—Ç Exel">
                        <i className="fa fa-file-excel"></i>
                    </span>
                    <span className="gjs-pn-btn" onClick={() => exportHtml(editorView)} title="–≠–∫—Å–ø–æ—Ä—Ç HTML">
                        <i className="fa fa-code"></i>
                    </span>
                    <span className="gjs-pn-btn" onClick={() => exportPDF(editorView)} title="–≠–∫—Å–ø–æ—Ä—Ç PDF">
                        <i className="fa fa-file-pdf"></i>
                    </span>
                    <span className="gjs-pn-btn" onClick={exportJSON} title="–≠–∫—Å–ø–æ—Ä—Ç JSON">
                        <i className="fa fa-file-export"></i>
                    </span>
                    <span className="gjs-pn-btn" onClick={importJSON} title="–ò–º–ø–æ—Ä—Ç JSON">
                        <i className="fa fa-upload"></i>
                    </span>
                    <span className="gjs-pn-btn" onClick={printAllPages} title="–ü–µ—á–∞—Ç—å">
                        <i className="fa fa-print"></i>
                    </span>
                </div>

            </div>
            <div id="editor" ref={editorRef}/>
        </div>
    );
};

export default ReportEditor;
